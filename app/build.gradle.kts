/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    alias(libs.plugins.kotlin.jvm)

    id("io.ktor.plugin") version "2.3.9"

    kotlin("plugin.serialization") version "1.9.23"    

    application
}

repositories {
    mavenCentral()
}


val ktorVersion = "3.0.3"

dependencies {
    
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
    
    implementation("io.ktor:ktor-server-core:${ktorVersion}")
    implementation("io.ktor:ktor-server-netty:${ktorVersion}")
    
    // Json 
    implementation("io.ktor:ktor-server-content-negotiation:${ktorVersion}")
    implementation("io.ktor:ktor-serialization-kotlinx-json:${ktorVersion}")

    // Ktor making request
    implementation("io.ktor:ktor-client-core:${ktorVersion}")
    implementation("io.ktor:ktor-client-cio:${ktorVersion}")
    implementation("io.ktor:ktor-client-logging:${ktorVersion}")
    // Handle received Json
    implementation("io.ktor:ktor-client-content-negotiation:${ktorVersion}")
    implementation("io.ktor:ktor-serialization-kotlinx-json:${ktorVersion}")


    
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    testImplementation("io.ktor:ktor-client-mock:${ktorVersion}")
    testImplementation("io.ktor:ktor-server-test-host:${ktorVersion}")
    testImplementation("io.mockk:mockk:1.13.5")

    // This dependency is used by the application.
    implementation(libs.guava)
    
}



// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class xfor the application.
    mainClass = "index.IndexKt"
}


tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}



// tasks.register<Exec>("startServer") {
//         commandLine("gradle", "run")
// }

// tasks.register<Exec>("stopServer") {
//         commandLine("gradle", "--stop")
// }


tasks.test {
    testLogging {
        showStandardStreams = true  // output println() values in gradle test
    }
    // dependsOn("startServer")
    // finalizedBy("stopServer")
}



tasks.jar {
    // this line is telling compiler main file inside the Jar file
    manifest {
        attributes["Main-Class"] = "index.IndexKt"
    } 
            //main source has to be included in jar file
        from(sourceSets.main.get().output) 
            // source code is depends on the confgured classpathes
        dependsOn(configurations.runtimeClasspath) 
            // this is finding jar file from the dependencies and find ziptrees which represent content of Jar file
        from({
            configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
        })
            // this line make sure that if there is duplicated config file in different dependencies, only one file will be included in Jar so that it won't be duplicated
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE 
    
}